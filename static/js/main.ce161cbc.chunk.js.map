{"version":3,"sources":["serviceWorker.js","helpers.js","component/SketchButton.js","component/Controls.js","Round.js","Points.js","component/NesContainer.js","component/Canvas.js","component/TypedText.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","getPrediction","theCanvas","model","canvas","tensor","tf","fromPixels","current","resizeNearestNeighbor","mean","expandDims","toFloat","div","then","loadedModel","predict","data","prediction","a","SketchButton","buttonText","onClickFunction","buttonId","type","id","className","concat","onClick","Controls","React","forwardRef","useContext","RoundContext","startRound","startExtraTime","seconds","GameContext","ref","labels","dispatch","currentRound","nextRound","useState","setPrediction","predictAndNextRound","pointReducerType","useEffect","console","log","getContext","fillRect","height","width","createContext","Round","setSeconds","setInterval","clearInterval","useTimer","timer","points","Provider","value","pointReducer","pointsState","action","NesContainer","children","title","classes","Canvas","lastX","lastY","mouseDown","context","fillStyle","onMouseDown","onMouseUp","undefined","onMouseMove","e","rect","target","getBoundingClientRect","x","clientX","left","y","clientY","top","strokeStyle","lineWidth","lineJoin","beginPath","moveTo","lineTo","closePath","stroke","drawLine","handleMousemove","TypedText","options","strings","this","props","typeSpeed","backSpeed","typed","Typed","typedText","destroy","style","whiteSpace","Component","process","require","createRef","GamePlay","setCurrentRound","Array","apply","length","map","round","index","useRounds","rounds","resetRounds","useReducer","gameTitle","game","to","result","StartScreen","GameRouting","basename","path","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ce161cbc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as tf from \"@tensorflow/tfjs\";\n\nfunction preprocessCanvas(canvas) {\n  // Preprocess image for the network\n  let tensor = tf\n    .browser\n    .fromPixels(canvas.current) // Shape: (300, 300, 3) - RGB image\n    .resizeNearestNeighbor([28, 28]) // Shape: (28, 28, 3) - RGB image\n    .mean(2) // Shape: (28, 28) - grayscale\n    .expandDims(2) // Shape: (28, 28, 1) - network expects 3d values with channels in the last dimension\n    .expandDims() // Shape: (1, 28, 28, 1) - network makes predictions for \"batches\" of images\n    .toFloat(); // Network works with floating points inputs\n  return tensor.div(255.0); // Normalize [0..255] values into [0..1] range\n}\n\nexport function getPrediction(theCanvas, model) {\n  const tensor = preprocessCanvas(theCanvas);\n  return model\n    .then(loadedModel => loadedModel.predict(tensor).data())\n    .then(async prediction => await tf.argMax(prediction).data()); // returns an int32 containing the predicted class\n}\n","import React from \"react\";\r\n\r\nconst SketchButton = ({buttonText, onClickFunction, buttonId, type=\"\"}) => {\r\n    let buttonClass = \"nes-btn\"\r\n\r\n    return (\r\n      <button type=\"button\" id={buttonId} className={buttonClass.concat(\" \", type)} onClick={onClickFunction}>\r\n          {buttonText}\r\n      </button>\r\n    );\r\n};\r\n\r\nexport default SketchButton;","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {getPrediction} from \"../helpers.js\";\r\nimport {RoundContext} from \"../Round\";\r\nimport {GameContext} from \"../App\";\r\nimport SketchButton from \"./SketchButton\";\r\n\r\nconst Controls = React.forwardRef(() => {\r\n    const {startRound, startExtraTime, seconds} = useContext(RoundContext);\r\n    const {ref, model, labels, dispatch, currentRound, nextRound} = useContext(GameContext);\r\n    let [prediction, setPrediction] = useState(\"\"); // Sets default label to empty string.\r\n\r\n    useEffect(() => {\r\n        console.log(prediction);\r\n    });\r\n\r\n    function predictAndNextRound(pointReducerType=\"addOne\") {\r\n        getPrediction(ref, model).then(prediction => {\r\n                setPrediction(labels[prediction[0]]);\r\n                if (labels[prediction[0]] === labels[currentRound]) {\r\n                    dispatch({type: pointReducerType});\r\n                }\r\n            }\r\n        );\r\n        nextRound();\r\n        startRound();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {seconds > 0 ? <div>\r\n            {<SketchButton buttonText=\"Clear the canvas.\" onClickFunction={() => {\r\n                const canvas = ref.current;\r\n                const ctx = canvas.getContext(\"2d\");\r\n                ctx.fillRect(0, 0, canvas.height, canvas.width);\r\n            }}  buttonId=\"clearCanvas\" type=\"is-warning\"/>}\r\n            {<SketchButton buttonText=\"Submit early for an extra Point\" onClickFunction={() => predictAndNextRound(\"addTwo\")} buttonId=\"predictEarly\"/>}\r\n            {<SketchButton buttonText=\"+10s at cost of 1 Point\" onClickFunction={() => {\r\n                startExtraTime();\r\n                dispatch({type: \"minusOne\"});\r\n            }} buttonId=\"extraTime\"/>}\r\n            </div>\r\n                : predictAndNextRound()}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport {Controls};\r\n","import React, {useState, useContext, useEffect} from \"react\";\r\nimport {GameContext} from \"./App\";\r\nimport {Controls} from \"./component/Controls\";\r\n\r\nconst RoundContext = React.createContext({});\r\n\r\nfunction useRounds(labels) {\r\n    let [currentRound, setCurrentRound] = useState(0);\r\n\r\n    const rounds = Array.apply(null, {length: labels.length})\r\n        .map((round, index) => <Round/>);\r\n\r\n    return [rounds, currentRound, () => setCurrentRound(currentRound + 1), () => setCurrentRound(0)];\r\n}\r\n\r\nfunction useTimer() {\r\n    const [seconds, setSeconds] = useState(20);\r\n\r\n    const interval = setInterval(() => {\r\n        if (seconds === 0) {\r\n            clearInterval();\r\n        } else {\r\n            setSeconds(seconds - 1);\r\n        }\r\n    }, 1000);\r\n\r\n    return [interval, seconds, () => setSeconds(20), () => setSeconds(seconds + 10)];\r\n}\r\n\r\nfunction Round() {\r\n    const [timer, seconds, startRound, startExtraTime] = useTimer();\r\n    const {labels, currentRound, points} = useContext(GameContext);\r\n\r\n    useEffect(() => {\r\n        return () => clearInterval(timer);\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <RoundContext.Provider value={{seconds, startRound, startExtraTime}}>\r\n                <Controls/>\r\n                <div className=\"nes-text\">You have {seconds} seconds to draw a {labels[currentRound]}!</div>\r\n                <div className=\"nes-text\">You've scored {points} Points so far.</div>\r\n            </RoundContext.Provider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {Round, useRounds, useTimer, RoundContext};","const initialPoints = 0;\r\n\r\nfunction pointReducer(pointsState, action) {\r\n    switch (action.type) {\r\n        case \"reset\":\r\n            return initialPoints;\r\n        case \"addOne\":\r\n            return pointsState + 1;\r\n        case \"addTwo\":\r\n            return pointsState + 2;\r\n        case \"minusOne\":\r\n            return pointsState - 1;\r\n        default:\r\n            return pointsState;\r\n    }\r\n}\r\n\r\nexport {pointReducer};","import React from \"react\";\r\n\r\nconst NesContainer = ({children, title=\"\",}) => {\r\n    let titleClass = (title ? \"with-title\" : \"\");\r\n    let classes = \"nes-container\".concat(\" \", \"is-dark\", \" \", \"is-rounded\", \" \", titleClass);\r\n\r\n    return (\r\n      <div className={classes}>\r\n\t\t  {title ? <p className=\"title\">{title}</p> : null}\r\n          {children}\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default NesContainer;","import React, {useContext, useEffect} from \"react\";\r\nimport {RoundContext} from \"../Round\";\r\n\r\nconst Canvas = React.forwardRef(() => {\r\n    const {ref} = useContext(RoundContext);\r\n    let mouseDown = false;\r\n    let lastX;\r\n    let lastY;\r\n\r\n    function drawLine(canvas, x, y, lastX, lastY) {\r\n        let context = canvas.getContext(\"2d\");\r\n\r\n        context.strokeStyle = \"#000000\";\r\n        context.lineWidth = 12;\r\n        context.lineJoin = \"round\";\r\n\r\n        context.beginPath();\r\n        context.moveTo(lastX, lastY);\r\n        context.lineTo(x, y);\r\n        context.closePath();\r\n        context.stroke();\r\n\r\n        return [x, y];\r\n    }\r\n\r\n    const handleMouseup = () => {\r\n        mouseDown = false;\r\n        [lastX, lastY] = [undefined, undefined];\r\n    };\r\n\r\n    const handleMousemove = e => {\r\n        const rect = e.target.getBoundingClientRect();\r\n        const x = e.clientX - rect.left;\r\n        const y = e.clientY - rect.top;\r\n\r\n        if (mouseDown) {\r\n            [lastX, lastY] = drawLine(e.target, x, y, lastX, lastY);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const canvas = ref.current;\r\n        const context = canvas.getContext(\"2d\");\r\n\r\n        context.fillStyle = \"#ffffff\";\r\n        context.fillRect(0, 0, canvas.height, canvas.width);\r\n    });\r\n\r\n    return (\r\n        <canvas\r\n            height={300}\r\n            width={300}\r\n            ref={ref}\r\n            onMouseDown={() => (mouseDown = true)}\r\n            onMouseUp={handleMouseup}\r\n            onMouseMove={e => handleMousemove(e)}\r\n        />\r\n    );\r\n});\r\n\r\nexport {Canvas};","import React from \"react\";\r\nimport Typed from \"typed.js\";\r\n\r\nclass TypedText extends React.Component {\r\n    componentDidMount() {\r\n        const {strings} = this.props;\r\n\r\n        const options = {\r\n            strings: strings,\r\n            typeSpeed: 50,\r\n            backSpeed: 50\r\n        };\r\n\r\n        this.typed = new Typed(this.typedText, options);\r\n    }\r\n\r\n    // destroy it (avoid memory leaks)\r\n    componentWillUnmount() {\r\n        this.typed.destroy();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"wrap\">\r\n                <span style={{whiteSpace: 'pre'}} ref={(typedText) => {\r\n                    this.typedText = typedText;\r\n                }}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TypedText;","import * as tf from \"@tensorflow/tfjs\";\r\nimport React, {useReducer} from \"react\";\r\nimport {RoundContext, useRounds} from \"./Round\";\r\nimport {pointReducer} from \"./Points\";\r\nimport NesContainer from \"./component/NesContainer\";\r\nimport {Canvas} from \"./component/Canvas\";\r\nimport {BrowserRouter as Router, Link, Route, Switch} from \"react-router-dom\";\r\nimport SketchButton from \"./component/SketchButton\";\r\nimport TypedText from \"./component/TypedText\";\r\n\r\nconst model = tf.loadLayersModel(process.env.PUBLIC_URL + \"/model/model.json\");\r\nconst labels = require(\"./labels.json\");\r\nlet ref = React.createRef();\r\n\r\nexport const GameContext = React.createContext({});\r\n\r\nfunction GamePlay() {\r\n    const [rounds, currentRound, nextRound, resetRounds] = useRounds(labels);\r\n    const [points, dispatch] = useReducer(pointReducer, 0);\r\n\r\n    let gameTitle = \"Sketch! - Round \" + (currentRound + 1) + \" of \" + rounds.length;\r\n    const game = (\r\n        <NesContainer title={gameTitle}>\r\n            <RoundContext.Provider value={{ref, model, labels}}>\r\n                <Canvas/>\r\n                {rounds[currentRound]}\r\n                <br/>\r\n                <Link to=\"/\">\r\n                    {<SketchButton buttonText=\"Home\" onClickFunction={() => resetRounds()} buttonId=\"home\"/>}\r\n                </Link>\r\n            </RoundContext.Provider>\r\n        </NesContainer>\r\n    );\r\n\r\n    const result = (\r\n        <NesContainer title=\"Sketch!\">\r\n\r\n            <h2>You scored {points} points!</h2>\r\n            <br/>\r\n            <TypedText strings={[\"Want to challenge your drawing skills again?\", \"Lets try again!\"]}/>\r\n            {<SketchButton buttonText=\"Try Again!\" onClickFunction={() => {\r\n                resetRounds();\r\n                dispatch({type: \"reset\"});\r\n            }\r\n            } type=\"is-primary\"/>}\r\n        </NesContainer>\r\n    );\r\n\r\n    return (\r\n        <GameContext.Provider\r\n            value={{points, dispatch, rounds, currentRound, nextRound, resetRounds, ref, model, labels}}>\r\n            {currentRound > 9 ? result : game}\r\n        </GameContext.Provider>\r\n    )\r\n}\r\n\r\nfunction StartScreen() {\r\n    return (\r\n        <NesContainer title=\"Sketch!\">\r\n            <TypedText\r\n                strings={[\"This game has been modeled-off Google's \\\"Quick, Draw!\\\" game, and uses a sampling from the \\\"Quick, Draw!\\\" dataset.<br/>\" +\r\n                \"Brought to you by the EPFL Extension School.\"]}/>\r\n            <br/>\r\n            <Link to=\"/game\">\r\n                {<SketchButton buttonText=\"Lets start!\" buttonId=\"gameScreen\"/>}\r\n            </Link>\r\n        </NesContainer>\r\n    )\r\n}\r\n\r\nfunction GameRouting() {\r\n    return (\r\n        <Router basename={'/react-quick-draw/'}>\r\n            <Switch>\r\n                <Route path=\"/game\">\r\n                    <GamePlay/>\r\n                </Route>\r\n                <Route path=\"/\">\r\n                    <StartScreen/>\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default GameRouting;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"nes.css/css/nes.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport GameRouting from \"./App\";\n\nReactDOM.render(\n    <div>\n        <GameRouting/>\n    </div>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}